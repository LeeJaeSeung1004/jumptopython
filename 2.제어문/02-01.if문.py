#if문
#프로그래밍에서 조건을 판단하여 해당 조건에 맞는 상황을 수행하는 데 쓰는 것이 바로 if문이다.
"돈이 있으면 택시를 타고 돈이 없으면 걸어간다"
#위와 같은 상황을 파이썬에서는 다음과 같이 표현할 수 있다.
money = True
if money:
    print("택시를 타고 가라")
else:
    print("걸어 가라")
#money에 True를 입력했으므로 money는 참이다.
# 따라서 if문 다음 문장이 수행되어 '택시를 타고 가라'가 출력된다.

#if문의 기본 구조
#다음은 if와 else를 사용한 조건문의 기본 구조이다.
# if 조건문:
#     수행할 문장1
#     수행할 문장2
#     ...
# else:
#     수행할 문장A
#     수행할 문장B
#     ...
# 조건문을 테스트해서 참이면 if문 바로 다음 문장(if 블록)들을 수행하고, 조건문이 거짓이면 else문 다음 문장(else 블록)들을 수행하게 된다.
# 그러므로 else문은 if문 없이 독립적으로 사용할 수 없다.

#들여쓰기
#if문을 만들 때는 if 조건문: 바로 아래 문장부터 if문에 속하는 모든 문장에 들여쓰기(indentation)를 해주어야 한다. 
# if 조건문:
#     수행할 문장1
#     수행할 문장2
#     수행할 문장3

# 다음처럼 작성하면 오류가 발생한다.
# "수행할 문장2"를 들여쓰기하지 않았기 때문이다.
# if 조건문:
#     수행할 문장1
# 수행할 문장2
#     수행할 문장3

# 다음과 같은 경우에도 오류가 발생한다. "수행할 문장3"을 들여쓰기했지만 "수행할 문장1"이나 "수행할 문장2"와 들여쓰기의 너비가 다르다.
# 즉 들여쓰기는 언제나 같은 너비로 해야 한다.

# if 조건문:
#     수행할 문장1
#     수행할 문장2
#         수행할 문장3

#조건문이란
#if 조건문에서 "조건문"이란 참과 거짓을 판단하는 문장을 말한다.

#비교연산자
#이번에는 조건문에 비교연산자(<, >, ==, !=, >=, <=)를 쓰는 방법에 대해 알아보자.
# x < y	x가 y보다 작다
# x > y	x가 y보다 크다
# x == y	x와 y가 같다
# x != y	x와 y가 같지 않다
# x >= y	x가 y보다 크거나 같다
# x <= y	x가 y보다 작거나 같다

x = 3
y = 2
x > y  #True
x < y  #False
x == y #False
x != y #True

# 앞에서 살펴본 택시 예제를 다음처럼 바꾸려면 어떻게 해야 할까?

# "만약 3000원 이상의 돈을 가지고 있으면 택시를 타고 그렇지 않으면 걸어 가라."

# 위 상황은 다음처럼 프로그래밍할 수 있다.

money = 2000
if money >= 3000:
    print("택시를 타고 가라")
else:
    print("걸어가라")
    
#and, or, not
#조건을 판단하기 위해 사용하는 다른 연산자로는 and, or, not이 있다. 각각의 연산자는 다음처럼 동작한다.

x or y	#x와 y 둘중에 하나만 참이어도 참이다
x and y	#x와 y 모두 참이어야 참이다
not x	#x가 거짓이면 참이다

#다음 예를 통해 or 연산자의 사용법을 알아보자.

"돈이 3000원 이상 있거나 카드가 있다면 택시를 타고 그렇지 않으면 걸어 가라."

money = 2000
card = True
if money >= 3000 or card:
    print("택시를 타고 가라")
else:
    print("걸어가라")
    
#x in s, x not in s
# x in 리스트	x not in 리스트
# x in 튜플	x not in 튜플
# x in 문자열	x not in 문자열

1 in [1, 2, 3]
1 not in [1, 2, 3] #False

#다음은 튜플과 문자열에 적용한 예이다. 
'a' in ('a', 'b', 'c') #True
'j' not in 'python'    #True

#택시 예제에 in을 적용해 보자.
"만약 주머니에 돈이 있으면 택시를 타고, 없으면 걸어 가라."

pocket = ["paper","cellphone","money"]
if "money" in pocket:
    print("택시를 타고 가라")
else:
    print("걸어가라")
    
#elif
# if와 else만으로는 다양한 조건을 판단하기 어렵다. 
# 다음 예를 보더라도 if와 else만으로는 조건을 판단하는 데 어려움을 겪게 된다.

"주머니에 돈이 있으면 택시를 타고, 주머니에 돈은 없지만 카드가 있으면 택시를 타고, 돈도 없고 카드도 없으면 걸어 가라."

# 위 문장을 보면 조건을 판단하는 부분이 두 군데가 있다.
# 먼저 주머니에 돈이 있는지를 판단해야 하고 주머니에 돈이 없으면 다시 카드가 있는지 판단해야 한다.
# if와 else만으로 위 문장을 표현하려면 다음과 같이 할 수 있다.

pocket = ["paper","handphone"]
card = True
if "money" in pocket:
    print("택시를 타고가라")
else:
    if card:
        print("택시를 타고가라")
    else:
        print("걸어가라")
#복잡함을 해결하기 위해 파이썬에서는 다중 조건 판단을 가능하게 하는 elif를 사용한다.

#위 예를 elif를 사용하면 다음과 같이 바꿀 수 있다.
pocket = ["paper","cellphone"]
card = True
if "money" in pocket:
    print("택시를 타고가라")
elif card:
    print("택시를 타고 가라")
else:
    print("걸어가라")
    
#즉 elif는 이전 조건문이 거짓일 때 수행된다.
# if, elif, else를 모두 사용할 때 기본 구조는 다음과 같다.

# if <조건문>:
#     <수행할 문장1> 
#     <수행할 문장2>
#     ...
# elif <조건문>:
#     <수행할 문장1>
#     <수행할 문장2>
#     ...
# elif <조건문>:
#     <수행할 문장1>
#     <수행할 문장2>
#     ...
# ...
# else:
#    <수행할 문장1>
#    <수행할 문장2>
#    ... 

# 조건부 표현식
score = 1
if score >= 60:
    message = "success"
else:
    message = "failure"
    
#위 코드는 score가 60 이상일 경우 message에 문자열 "success"를, 아닐 경우에는 "failure"를 대입하는 코드이다.
#파이썬의 조건부 표현식(conditional expression)을 사용하면 위 코드를 다음과 같이 간단히 표현할 수 있다.
message = "success" if score >= 60 else "failure"

#조건부 표현식은 다음과 같이 정의한다.

#조건문이 참인 경우 if 조건문 else 조건문이 거짓인 경우