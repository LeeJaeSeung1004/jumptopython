# 지금까지 파이썬으로 프로그래밍하기 위해 알아야 하는 것들을 대부분 공부했다.
# 이제 여러분은 원하는 프로그램을 직접 만들 수 있을 것이다.
# 하지만 그 전에 먼저 여러분이 만들려는 프로그램이 이미 만들어져 있는지 살펴보기 바란다.
# 물론 공부를 위해서라면 누군가 만들어 놓은 프로그램을 또 만들 수도 있다.
# 하지만 그런 목적이 아니라면 이미 만들어진 것을 다시 만드는 것은 불필요한 행동이다.
# 그리고 이미 만들어진 프로그램은 테스트 과정을 수 없이 거쳤기 때문에 충분히 검증되어 있다.
# 따라서 무엇인가 새로운 프로그램을 만들기 전에는 이미 만들어진 것들,
# 그중에서도 특히 파이썬 배포본에 함께 들어 있는 파이썬 라이브러리를 살펴보는 것이 매우 중요하다.

# 라이브러리를 살펴보기 전에 파이썬 내장 함수를 먼저 살펴보자.
# 우리는 이미 몇 가지 내장 함수를 배웠다. print, del, type 등이 바로 그것이다.
# 이러한 파이썬 내장 함수는 외부 모듈과 달리 import가 필요하지 않기 때문에 아무런 설정 없이 바로 사용할 수 있다.

#abs
#abs(x)는 어떤 숫자를 입력받았을 때, 그 숫자의 절댓값을 돌려주는 함수이다.
from fcntl import F_SEAL_SEAL


abs(3)
abs(-3)
abs(-1.2)

#all
#all(x)는 반복 가능한(iterable) 자료형 x를 입력 인수로 받으며
#이 x의 요소가 모두 참이면 True, 거짓이 하나라도 있으면 False를 돌려준다.

#※ 반복 가능한 자료형이란 for문으로 그 값을 출력할 수 있는 것을 의미한다.
# 리스트, 튜플, 문자열, 딕셔너리, 집합 등이 있다.

#다음예를 보자
all([1,2,3])
True
#리스트 자료형 [1, 2, 3]은 모든 요소가 참이므로 True를 돌려준다.
all([1,2,3,0])
False
#리스트 자료형 [1, 2, 3, 0] 중에서 요소 0은 거짓이므로 False를 돌려준다.
all([])
True
#만약 all의 입력 인수가 빈 값인 경우에는 True를 리턴한다.
#자료형의 참과 거짓에 대해 잘 기억나지 않는다면 02-7을 다시 한 번 읽어 보자.

#any()
#any(X)는 반복 가능한(iterable) 자료형 x를 입력 인수로 받으며 이 x의 요소 중 하나라도 참이 있으면 True를 돌려주고,
#x가 모두 거짓일 때에만 False를 돌려준다. all(x)의 반대이다.

#다음 예를 보자
any([1,2,3,0])
True

#리스트 자료형 [1, 2, 3, 0] 중에서 1, 2, 3이 참이므로 True를 돌려준다.

any([0,""])
False

#리스트 자료형 [0, ""]의 요소 0과 ""은 모두 거짓이므로 False를 돌려준다.
any([])
False

#만약 any의 입력 인수가 빈 값인 경우에는 False를 리턴한다.

#chr
#chr(i)는 유니코드(Unicode) 값을 입력받아 그 코드에 해당하는 문자를 출력하는 함수이다.

#※ 유니코드는 전 세계의 모든 문자를 컴퓨터에서 일관되게 표현하고 다룰 수 있도록 설계된 산업 표준이다.

chr(97)
"a"
chr(44032)
"가"

# dir
# dir은 객체가 자체적으로 가지고 있는 변수나 함수를 보여 준다. 다음 예는 리스트와 딕셔너리 객체 관련 함수(메서드)를 보여 주는 예이다.
# 우리가 02장에서 살펴본 자료형 관련 함수를 만나 볼 수 있다.

dir([1,2,3])
['append', 'count', 'extend', 'index', 'insert', 'pop',...]
dir({"1":"A"})
['clear', 'copy', 'get', 'has_key', 'items', 'keys',...]

# divmod
# divmod(a,b)는 2개의 숫자를 입력으로 받는다.
# 그리고 a를 b로 나눈 몫과 나머지를 튜플 형태로 돌려주는 함수이다.

divmod(7,3)
(2,1)

#몫을 구하는 연산자 //와 나머지를 구하는 연산자 %를 각각 사용한 결과와 비교해 보자.

# enumerate
# enumerate는 "열거하다"라는 뜻이다. 이 함수는 순서가 있는 자료형(리스트, 튜플, 문자열)을 입력으로 받아 인덱스 값을 포함하는 enumerate 객체를 돌려준다.

# ※ 보통 enumerate 함수는 다음 예제처럼 for문과 함께 자주 사용한다.

# 잘 이해되지 않으면 다음 예를 보자.

for i,name in enumerate(["body","foo","bar"]):
    print(i,name)
    
# 0 body
# 1 foo
# 2 bar

# 순서 값과 함께 body, foo, bar가 순서대로 출력되었다.
# 즉 위 예제와 같이 enumerate를 for문과 함께 사용하면 자료형의 현재 순서(index)와 그 값을 쉽게 알 수 있다.

# for문처럼 반복되는 구간에서 객체가 현재 어느 위치에 있는지 알려 주는 인덱스 값이 필요할때 enumerate 함수를 사용하면 매우 유용하다.


# eval
# eval(expression )은 실행 가능한 문자열(1+2, 'hi' + 'a' 같은 것)을 입력으로 받아 문자열을 실행한 결괏값을 돌려주는 함수이다.

eval('1+2')
3
eval("'hi' + 'a'")
'hia'
eval('divmod(4, 3)')
(1, 1)
#보통 eval은 입력받은 문자열로 파이썬 함수나 클래스를 동적으로 실행하고 싶을 때 사용한다.

# filter
# filter란 무엇인가를 걸러낸다는 뜻으로 filter 함수도 동일한 의미를 가진다.

# filter 함수는 첫 번째 인수로 함수 이름을, 두 번째 인수로 그 함수에 차례로 들어갈 반복 가능한 자료형을 받는다. 그리고 두 번째 인수인 반복 가능한 자료형 요소가 첫 번째 인수인 함수에 입력되었을 때 반환 값이 참인 것만 묶어서(걸러 내서) 돌려준다.

# 다음 예를 보자.

#positive.py 
# def positive(l): 
#     result = [] 
#     for i in l: 
#         if i > 0: 
#             result.append(i) 
#     return result

# print(positive([1,-3,2,0,-5,6]))
# 결과값: [1, 2, 6]

# 즉 위에서 만든 positive 함수는 리스트를 입력값으로 받아 각각의 요소를 판별해서 양수 값만 돌려주는 함수이다.

# filter 함수를 사용하면 위 내용을 다음과 같이 간단하게 작성할 수 있다.

#filter1.py
def positive(x):
    return x > 0

print(list(filter(positive, [1, -3, 2, 0, -5, 6])))
# 결과값: [1, 2, 6]

# 여기에서는 두 번째 인수인 리스트의 요소들이 첫 번째 인수인 positive 함수에 입력되었을때 반환 값이 참인 것만 묶어서 돌려준다.
# 앞의 예에서는 1, 2, 6만 양수여서 x > 0 문장이 참이되므로 [1, 2, 6]이라는 결괏값을 돌려주게 된 것이다.

# 앞의 함수는 lambda를 사용하면 더욱 간편하게 코드를 작성할 수 있다.

#list(filter(lambda x: x > 0, [1, -3, 2, 0, -5, 6]))
# [1, 2, 6]

# hex
# hex(x)는 정수 값을 입력받아 16진수(hexadecimal)로 변환하여 돌려주는 함수이다.
hex(234)
'0xea'
hex(3)
"0x3"